一. 文件管理：
    1. 文件查找   find+目录+条件
    2. 文件拷贝   cp+源+目的
    
    3. 打包解包：tar    -z -j -J    zip bzip2 xz
    
二. 文本处理 （管道命令）
    1. 查看文件(显示行号）  nl
    2. 文本查找：  grep  正则表达式全局查找并打印  -i 忽略大小写  -n 打印行号  -c 统计次数
    3. 排序： sort -d -n -r
    4. 转换（字符）： tr -d删除字符   -s字符压缩
    5. 切分文本：cut  -d 分隔符    -f 选择域   -c字符范围
    6. 拼接文本： paste  -d 分隔符
    7. 统计 wc  -c字符数 -w 单词数  -l 行数
    8. sed 常用与一整行的处理   -a在后插入   -i在前插入    -d删除
    9. awk 常用与处理小段数据  $0 一整行，  $1 。。。。 按字段取
三。 文件内容
    1. 打印文件内容  cat
    2. tac  从后往前打印
    3. more 可以一页一页查看，适合大文件
    4. less 还可以向前翻页
    5. head 文件前几行
四。 指令与文件搜索
      1. which  指令搜索
      2. whereis 文件搜索 通过目录
      3. locate 文件搜索 正则表达式，关键字
      4. find 文件搜索  通过属性 权限
      
      
五。性能分析  进程管理
    1. 进程查询 ps  -l  自身相关的进程   aux  所有进程   aux｜grep  查看特定进程
 -l：   F：进程标志，权限    S：进程状态   C：CPU使用率  Time：进程用掉cpu时间
    
    2. 进程监控：top  实时显示进程信息   -d隔秒数更新
    
    3. free 内存使用量
    
    4. lsof  查看打开文件
    
    5. shell 进程资源限制  ulimit  -n可打开最大文件数
    
    6. fork vfork clone  创建子进程
    
    7. init进程  第一个用户级进程， 相当于进程树的根
    
    8. pstree 进程树
    
    9. exit（） _exit（）   进入内核
    
    10. netstat 查看占用端口进程（socket连接）  -a查看所有连接 -t tcp连接 -u udp连接   -n 显示端口号 -l 列出监听状态 -p 显示pid
    
    
六。 开发 调试
    1. 编辑器vim
    2. 编译器 gcc g++
    
    3. 调试工具 gdb      1. 得到可执行文件  gcc -o可执行文件     -g源文件
                        2. 启动 gdb
                        3. gdb命令   r:运行程序  q：推出gdb  b：设置断点    c：继续执行   s：执行一行    n：执行一行，不进入函数  
    
    
    
        
