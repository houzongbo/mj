分布式架构：

  分布式计算：通过负载均衡，打到相应服务器节点；微服务架构将服务分离封装。用消息队列交互。
  
  分布式缓存：redis，使用内存来存取数据。
  
  分布式存储：hdfs hive  spark
  
  消息队列：kafka
  
  CAP：
  
  
  
Redis：基于内存存储的key-value数据库，常用与分布式缓存。可持久化，基于单线程进行操作。

   1. 5种数据类型
      string,list,hash,set,sorted-set.     并且要将数据封装成对象来存储使用。
      
   2. 与memcache区别：
      可持久化，将数据存硬盘，断电数据不丢失。
      数据量大。
      memcahce数据类型只有string
   3. redis单线程：
      采用队列模式将并行访问变为串形访问。不容易发生竞争问题，而且基于内存操作，防止上下文的频繁切换。  多线程也是对cpu的利用，但redis基于内存，没有cpu瓶颈。
   4. redis为什么快：
      单线程，省去切换上下文的时间和竟态的避免。
      基于内存，查找，操作复杂度低。
      数据结构特殊设计，dictionary，sds （char*）    跳跃表：多指针的链表，相当于可以二分查找的链表。
      非阻塞io，io多路复用模型。处理大量请求。
      底层模型机制不同，vm模型，不用太多系统调用。
      
      
  redis高可用架构：
      master-slave 主从复制 读写分离，哨兵，集群。
      
   5. master-slave 主从复制 读写分离架构：
      目的：自动故障转移，高可用。   分担主机的读写压力。
      master数据库可以进行读写操作，当写造成数据变化时会同步给slave数据库；而slave数据库只进行读操作，帮助分担读压力。
   6. 哨兵架构：
      监控主从数据库是否正常运行，如果master出现问题，选举（raft）一个slave成为新master。老master即使恢复也成为slave。
   7. redis-cluster集群：
      之前的master-slave架构，每个节点都是全量存储，浪费内存。因此可采用分布式存储，每个master节点存储不同。可以横向扩容。
      
      分布式存储寻址：
      hash值：    增删节点，会对所有节点数据造成影响。
      一致性hash：哈希环，将节点按hash值分布在环上，数据也要算hash放到顺时针第一个个节点上。
                优点：在增加或删除节点时，只会影响到该节点和前一个节点之间的数据。
                
                虚拟节点（自动负载均衡）：对每个节点也都按范围算多个hash值，并将这些值映射成为多个虚拟节点，形成数据均匀分布。
      hash—slot：固定16384 个 hash slot，数据都对应到slot中。每个master都有部分slot，增删节点都是对slot的移动。
   
   8. 持久化：
      保证断电不丢失，将数据存到硬盘。 RDB方式和AOF方式。
      RDB：定期将内存数据快照写入磁盘，实际通过fork（）子进程完成。
      AOF：以日志形式记录写入和删除操作。重启后再执行一遍。
          aof现将日志打到内核缓冲区中，由操作系统决定什么时候进行磁盘写入。eyerysec，每秒同步一次。比较灵活。
   9. 过期定期 惰性删除，内存淘汰
      LRU
      定期随机抽查key，过期就删除。 当获得key时检查是否过期。
   10. 缓存问题：
      缓存穿透：
            当访问数据库中不存在的数据时，缓存一定也访问不到。可以直接返回空值或者用布隆过滤器。
      缓存雪崩：
            当系统刚开始 缓存未准备好，大量缓存同时过期，服务器宕机。大量请求打到数据库上导致数据库崩溃。
            缓存预热，过期时间加随机值，应用分布式架构。
      缓存一致性：
          1数据更新立即更新缓存。读缓存前判断是否最新。
          2一般更新数据库后直接删除缓存，再重新创建缓存。
            将修改数据库，删除缓存，读缓存放队列里按顺序实现。
    11. raft选举算法：
        每个节点状态：leader，follower，candidate
      启动时都是follower，在一段时间（选举超时时间）没有收到leader心跳，会切换到candidate状态进行选举，得票多的成为leader。
      leader会不停发心跳信息。
      投票选举： follower一段时间收不到心跳，转为candidate，先给自己投一票，再向其他节点发选举请求。
      节点收到请求，并且没投票时就可以投票。 最多投一次。 得票多数成为leader。
      选举超时时间随机，避免大量followers成为candidate。
      
      
      12. 数据结构 dict的hash溢出，渐进式hash
        键值对过多需要建个更大表，然后把之前的键值对再依次对应到新表。避免一次性过多rehash给服务器造成负担。
        分治的思想，字典中维持一个id，每次对字典进行操作，都会对id索引的键值对进行依次rehash，id+1。
        随着操作的进行，rehash也会完成，id重制为-1.
        
        经常比较的是stl hashmap的rehash，这个hashmap就是像vector resize函数，开辟2倍新空间，再一次性rehash进去。
 消息队列：
   目的处理高并发请求。 一种生产者-消费者模型。为了实现解藕，而且可以异步处理请求。
    1. 异步处理，避免请求高峰，降低负载，提高响应速度。但是需要设计好业务流程，比如订单系统，付款失败不能直接出货。
    2. 解藕：生产者-消费者模型，事件驱动。将生产者和消费者分离，提升延展性。
    
    问题：
      分布式事务的数据一致性。在分布式中，各种功能都是分开多个系统管理。一个订单系统，与积分系统，优惠券系统相关。 所以一次下单成功，要这些系统全部成功。
      将这些操作都放到一个事务中。
      1. 重复消费问题：
         消费者问题都是有一个重试机制，当一个消费者出现问题进行重试对消息队列重新请求，那么其他消费者可能也会再次监听触发事件响应，造成重复消费。
         比如下单系统，积分系统重试，可能影响优惠活动系统等重复消费。
         通过接口幂等实现。 就是同参数来调用接口，无论调用多少次结果都一样。分为强校验（重要性，跟钱相关）和弱校验。
         强校验：加个流水表，记录操作事件，当每次消费者监听到消息都先去对一下流水表，如果已经有记录了就不再执行消费。
         弱校验：用redis缓存来记录，监听到消息后去缓存查看。
      2. 顺序消费：
          消息队列，生产者消费者模型需要保证消息的顺序。比如一个订单系统，不能付款前就发货。
          可以对订单号取hash值，每次收到订单，对订单号取hash，把同一订单的打到同一队列中，保证fifo。
      
  事务：一系列操作，要么同时完成，要么同时失败。保证acid特性。
  分布式事务：将分布式中不同服务的操作组合一起。要么同时完成，要么同时失败
  
  kafka：常用的分布式消息队列架构
     多个kafka服务器是 kafka集群， 一个kafka服务器就是broker。
      将队列（topic）进行分区，分成partition。
      数据分布在不同的partition中，每个partition在其他的kafka服务器中都有备份，实现了高可用。
      
      kafka支持持久化操作。会将partition通过缓存写入磁盘。
      
  
 负载均衡：
 
    分类：根据osi7层网络架构分类
      二层负载均衡：负载均衡服务器对外提供虚ip，根据改写报文的mac地址打到集群相应节点。
      三层负载均衡：可以根据IP打到相应的节点。
      四层负载均衡：基于tcp/udp，通过修改ip和端口号来转发。
      七层负载均衡：可根据url，http请求头选择负载均衡。
      
    算法：静态 动态
        轮询：按顺序分配
        加权轮询：根据服务器负载能力分配。
        最小连接：考虑到了每个请求连接时间不同，如果轮询可能造成分配不均。最小链接是把请求打到连接数最少节点。
        加权最小连接：考虑服务器负载能力。
        源ip hash： 根据ip取hash值，再根据服务器取模。 保证同一类请求打到相同节点。
  
  
